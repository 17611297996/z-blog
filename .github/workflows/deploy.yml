jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      PNPM_VERSION: "8.15.6"  # 指定精确版本

    steps:
    # ███████ 强制重置 Node 环境 ███████████████
    - name: 清除旧版 Node 残留
      run: |
        # 移除所有可能的残留链接
        sudo rm -f /usr/local/bin/pnpm /usr/local/bin/pnpx 2>/dev/null
        # 清除可能的缓存干扰
        sudo npm cache clean -f
        
    # ███████ Node.js 安装强化 ████████████████
    - name: 安装 Node.js 20 (强制模式)
      uses: actions/setup-node@v3
      with:
        node-version: 20.x
        cache: 'pnpm'
        cache-dependency-path: '**/pnpm-lock.yaml'
        check-latest: true  # 强制检查最新版本

    # ███████ pnpm 安装紧急修复 ███████████████
    - name: 核心修复 - pnpm 安装
      run: |
        # 强制激活 Corepack
        sudo corepack enable --install-directory=/usr/local/bin
        # 精确安装指定版本
        sudo corepack prepare pnpm@${PNPM_VERSION} --activate
        # 双重安装保障
        npm install -g pnpm@${PNPM_VERSION} --registry=https://registry.npmmirror.com
        # 路径显式注入
        echo "全局路径: $(npm root -g)/bin" >> $GITHUB_PATH
        # 符号链接保障
        sudo ln -sf "$(npm root -g)/bin/pnpm" /usr/local/bin/pnpm
        # 权限修复
        sudo chmod 755 $(npm root -g)/bin/pnpm

    # ███████ 环境验证 ███████████████████████
    - name: 深度环境诊断
      run: |
        echo "===== 关键诊断信息 ====="
        # 路径分解
        echo "PATH 分解:"
        echo "$PATH" | tr ':' '\n'
        # 物理路径追踪
        echo "pnpm 真实路径:"
        realpath $(which pnpm)
        # 版本验证
        echo "pnpm 版本:"
        pnpm -v
        # 权限检查
        echo "文件权限:"
        ls -l $(which pnpm)
        # 全局路径验证
        echo "全局模块路径:"
        npm root -g

    # ███████ 后续步骤... ███████████████████
